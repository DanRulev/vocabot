// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanRulev/vocabot.git/internal/repository (interfaces: QueryI)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueryI is a mock of QueryI interface.
type MockQueryI struct {
	ctrl     *gomock.Controller
	recorder *MockQueryIMockRecorder
}

// MockQueryIMockRecorder is the mock recorder for MockQueryI.
type MockQueryIMockRecorder struct {
	mock *MockQueryI
}

// NewMockQueryI creates a new mock instance.
func NewMockQueryI(ctrl *gomock.Controller) *MockQueryI {
	mock := &MockQueryI{ctrl: ctrl}
	mock.recorder = &MockQueryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryI) EXPECT() *MockQueryIMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockQueryI) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockQueryIMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockQueryI)(nil).ExecContext), varargs...)
}

// GetContext mocks base method.
func (m *MockQueryI) GetContext(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockQueryIMockRecorder) GetContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockQueryI)(nil).GetContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockQueryI) SelectContext(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockQueryIMockRecorder) SelectContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockQueryI)(nil).SelectContext), varargs...)
}
