// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanRulev/vocabot.git/internal/service (interfaces: RepositoryI)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/DanRulev/vocabot.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// AddQuizResult mocks base method.
func (m *MockRepositoryI) AddQuizResult(arg0 context.Context, arg1 models.QuizCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuizResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuizResult indicates an expected call of AddQuizResult.
func (mr *MockRepositoryIMockRecorder) AddQuizResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuizResult", reflect.TypeOf((*MockRepositoryI)(nil).AddQuizResult), arg0, arg1)
}

// AddWord mocks base method.
func (m *MockRepositoryI) AddWord(arg0 context.Context, arg1 models.WordCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWord indicates an expected call of AddWord.
func (mr *MockRepositoryIMockRecorder) AddWord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWord", reflect.TypeOf((*MockRepositoryI)(nil).AddWord), arg0, arg1)
}

// QuizStats mocks base method.
func (m *MockRepositoryI) QuizStats(arg0 context.Context, arg1 int64) (models.QuizStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuizStats", arg0, arg1)
	ret0, _ := ret[0].(models.QuizStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuizStats indicates an expected call of QuizStats.
func (mr *MockRepositoryIMockRecorder) QuizStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuizStats", reflect.TypeOf((*MockRepositoryI)(nil).QuizStats), arg0, arg1)
}

// RandomUnknownWord mocks base method.
func (m *MockRepositoryI) RandomUnknownWord(arg0 context.Context, arg1 int64) (models.WordCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomUnknownWord", arg0, arg1)
	ret0, _ := ret[0].(models.WordCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomUnknownWord indicates an expected call of RandomUnknownWord.
func (mr *MockRepositoryIMockRecorder) RandomUnknownWord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomUnknownWord", reflect.TypeOf((*MockRepositoryI)(nil).RandomUnknownWord), arg0, arg1)
}

// WordStat mocks base method.
func (m *MockRepositoryI) WordStat(arg0 context.Context, arg1 int64) (models.WordStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WordStat", arg0, arg1)
	ret0, _ := ret[0].(models.WordStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WordStat indicates an expected call of WordStat.
func (mr *MockRepositoryIMockRecorder) WordStat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WordStat", reflect.TypeOf((*MockRepositoryI)(nil).WordStat), arg0, arg1)
}

// Words mocks base method.
func (m *MockRepositoryI) Words(arg0 context.Context, arg1 int64, arg2 int, arg3 bool) ([]models.WordCard, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Words", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.WordCard)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Words indicates an expected call of Words.
func (mr *MockRepositoryIMockRecorder) Words(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Words", reflect.TypeOf((*MockRepositoryI)(nil).Words), arg0, arg1, arg2, arg3)
}
