// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanRulev/vocabot.git/internal/service (interfaces: APII)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/DanRulev/vocabot.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAPII is a mock of APII interface.
type MockAPII struct {
	ctrl     *gomock.Controller
	recorder *MockAPIIMockRecorder
}

// MockAPIIMockRecorder is the mock recorder for MockAPII.
type MockAPIIMockRecorder struct {
	mock *MockAPII
}

// NewMockAPII creates a new mock instance.
func NewMockAPII(ctrl *gomock.Controller) *MockAPII {
	mock := &MockAPII{ctrl: ctrl}
	mock.recorder = &MockAPIIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPII) EXPECT() *MockAPIIMockRecorder {
	return m.recorder
}

// DictionaryData mocks base method.
func (m *MockAPII) DictionaryData(arg0 context.Context, arg1 string) (models.TranslationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DictionaryData", arg0, arg1)
	ret0, _ := ret[0].(models.TranslationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DictionaryData indicates an expected call of DictionaryData.
func (mr *MockAPIIMockRecorder) DictionaryData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DictionaryData", reflect.TypeOf((*MockAPII)(nil).DictionaryData), arg0, arg1)
}

// RandomWord mocks base method.
func (m *MockAPII) RandomWord(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomWord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomWord indicates an expected call of RandomWord.
func (mr *MockAPIIMockRecorder) RandomWord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomWord", reflect.TypeOf((*MockAPII)(nil).RandomWord), arg0)
}

// TranslateEnToRu mocks base method.
func (m *MockAPII) TranslateEnToRu(arg0 context.Context, arg1 string) (models.MyMemoryTranslationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateEnToRu", arg0, arg1)
	ret0, _ := ret[0].(models.MyMemoryTranslationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateEnToRu indicates an expected call of TranslateEnToRu.
func (mr *MockAPIIMockRecorder) TranslateEnToRu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateEnToRu", reflect.TypeOf((*MockAPII)(nil).TranslateEnToRu), arg0, arg1)
}
