package bot

import (
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	ButtonNewWord         = "üìö –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ"
	ButtonQuiz            = "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"
	ButtonMyWords         = "‚ùó–ú–æ–∏ —Å–ª–æ–≤–∞"
	ButtonProgress        = "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
	ButtonWordProgress    = "üìö –°–ª–æ–≤–∞"
	ButtonQuizProgress    = "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω—ã"
	ButtonLearnedWords    = "‚úÖ –í—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
	ButtonNotLearnedWords = "‚ùå –ù–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
	ButtonMainMenu        = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
	ButtonBack            = "‚è™ –ù–∞–∑–∞–¥"
	ButtonHelp            = "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
)

func (t *TelegramAPI) handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		t.handleStartCommand(message)
	case "help":
		t.handleHelpCommand(message)
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start")
		sendMessage(t.bot, msg)
	}
}

func (t *TelegramAPI) handleStartCommand(message *tgbotapi.Message) {
	welcomeText := "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n" +
		"‚ú® –ß—Ç–æ —è —É–º–µ—é:\n" +
		"‚Ä¢ üìÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n" +
		"‚Ä¢ üß† –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n" +
		"‚Ä¢ üìö –ü–æ–º–æ–≥–∞—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n" +
		"‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∏—Ç—å—Å—è\n\n" +
		"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"

	keyboard := t.generateMenuKeyboard()

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	msg.ReplyMarkup = keyboard

	sendMessage(t.bot, msg)
}

func (t *TelegramAPI) showMainMenu(message *tgbotapi.Message) {
	keyboard := t.generateMenuKeyboard()

	msg := tgbotapi.NewMessage(message.Chat.ID, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
	msg.ReplyMarkup = keyboard

	sendMessage(t.bot, msg)
}

func (t *TelegramAPI) generateMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(ButtonNewWord),
			tgbotapi.NewKeyboardButton(ButtonQuiz),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(ButtonMyWords),
			tgbotapi.NewKeyboardButton(ButtonProgress),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(ButtonHelp),
		),
	)

	keyboard.ResizeKeyboard = true
	keyboard.OneTimeKeyboard = false

	return keyboard
}

func (t *TelegramAPI) handleHelpCommand(message *tgbotapi.Message) {
	helpText := `
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üéØ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:
‚Ä¢ "–°–ª–æ–≤–æ –¥–Ω—è" ‚Äî –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞" ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
‚Ä¢ "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å" ‚Äî —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ
‚Ä¢ "–ü–æ–º–æ—â—å" ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
`

	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	sendMessage(t.bot, msg)
}

func (t *TelegramAPI) handleMessage(message *tgbotapi.Message) {
	if message.From == nil {
		log.Printf("Message without sender: %d", message.Chat.ID)
		return
	}
	userID := message.From.ID
	text := message.Text

	switch {
	case text == ButtonNewWord:
		t.word.sendNewWord(message, userID)
	case text == ButtonQuiz:
		t.quiz.sendNewQuiz(message, userID)
	case text == ButtonMyWords:
		t.showMyWordsMenu(message)
	case text == ButtonProgress:
		t.showProgressMenu(message)
	case text == ButtonWordProgress:
		t.word.sendWordStats(message)
	case text == ButtonQuizProgress:
		t.quiz.sendQuizStats(message)
	case text == ButtonLearnedWords:
		t.word.showWords(message, userID, 0, true)
	case text == ButtonNotLearnedWords:
		t.word.showWords(message, userID, 0, false)
	case text == ButtonMainMenu || text == ButtonBack:
		t.showMainMenu(message)
	case text == ButtonHelp:
		t.handleHelpCommand(message)

	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "–Ø –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
		sendMessage(t.bot, msg)
	}
}

func (t *TelegramAPI) showProgressMenu(message *tgbotapi.Message) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(ButtonWordProgress),
			tgbotapi.NewKeyboardButton(ButtonQuizProgress),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(ButtonBack),
		),
	)

	keyboard.ResizeKeyboard = true
	keyboard.OneTimeKeyboard = false

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
	msg.ReplyMarkup = keyboard

	sendMessage(t.bot, msg)
}

func (t *TelegramAPI) showMyWordsMenu(message *tgbotapi.Message) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(ButtonLearnedWords),
			tgbotapi.NewKeyboardButton(ButtonNotLearnedWords),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(ButtonBack),
		),
	)

	keyboard.ResizeKeyboard = true
	keyboard.OneTimeKeyboard = false

	msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–ª–æ–≤:")
	msg.ReplyMarkup = keyboard

	sendMessage(t.bot, msg)
}

func (t *TelegramAPI) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	callback := tgbotapi.NewCallback(query.ID, "")
	callback.ShowAlert = false
	if _, err := t.bot.Request(callback); err != nil {
		log.Printf("Failed to answer callback: %v", err)
	}

	data := query.Data

	switch {
	case data == "know" || data == "repeat" || data == "new_word":
		t.word.handleWordCallbackQuery(query)

	case strings.HasPrefix(data, "f_") || strings.HasPrefix(data, "t_"):
		t.word.wordHandlePagination(query)

	case strings.HasPrefix(data, "quiz_") || data == "new_quiz":
		t.quiz.handleQuizCallbackQuery(query)

	case data == "main_menu":
		t.showMainMenu(query.Message)

	default:
		log.Printf("Unknown callback data: %s from user %d", data, query.From.ID)
	}
}
