// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanRulev/vocabot.git/internal/bot (interfaces: ServiceI)

// Package mock_bot is a generated GoMock package.
package mock_bot

import (
	context "context"
	reflect "reflect"

	models "github.com/DanRulev/vocabot.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// AddQuizResult mocks base method.
func (m *MockServiceI) AddQuizResult(arg0 context.Context, arg1 models.QuizCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuizResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuizResult indicates an expected call of AddQuizResult.
func (mr *MockServiceIMockRecorder) AddQuizResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuizResult", reflect.TypeOf((*MockServiceI)(nil).AddQuizResult), arg0, arg1)
}

// AddWord mocks base method.
func (m *MockServiceI) AddWord(arg0 context.Context, arg1 models.WordCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWord indicates an expected call of AddWord.
func (mr *MockServiceIMockRecorder) AddWord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWord", reflect.TypeOf((*MockServiceI)(nil).AddWord), arg0, arg1)
}

// NewQuiz mocks base method.
func (m *MockServiceI) NewQuiz(arg0 context.Context, arg1 int64) (string, map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuiz", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewQuiz indicates an expected call of NewQuiz.
func (mr *MockServiceIMockRecorder) NewQuiz(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuiz", reflect.TypeOf((*MockServiceI)(nil).NewQuiz), arg0, arg1)
}

// QuizStats mocks base method.
func (m *MockServiceI) QuizStats(arg0 context.Context, arg1 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuizStats", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuizStats indicates an expected call of QuizStats.
func (mr *MockServiceIMockRecorder) QuizStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuizStats", reflect.TypeOf((*MockServiceI)(nil).QuizStats), arg0, arg1)
}

// RandomWord mocks base method.
func (m *MockServiceI) RandomWord(arg0 context.Context) (string, models.WordCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomWord", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(models.WordCard)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RandomWord indicates an expected call of RandomWord.
func (mr *MockServiceIMockRecorder) RandomWord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomWord", reflect.TypeOf((*MockServiceI)(nil).RandomWord), arg0)
}

// WordStat mocks base method.
func (m *MockServiceI) WordStat(arg0 context.Context, arg1 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WordStat", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WordStat indicates an expected call of WordStat.
func (mr *MockServiceIMockRecorder) WordStat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WordStat", reflect.TypeOf((*MockServiceI)(nil).WordStat), arg0, arg1)
}

// Words mocks base method.
func (m *MockServiceI) Words(arg0 context.Context, arg1 int64, arg2 int, arg3 bool) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Words", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Words indicates an expected call of Words.
func (mr *MockServiceIMockRecorder) Words(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Words", reflect.TypeOf((*MockServiceI)(nil).Words), arg0, arg1, arg2, arg3)
}
